pipeline {
    agent {
        node {label 'python'}
    }
    environment {
        APPLICATION_NAME = 'python-payment'
        GIT_REPO="https://github.com/PriyaVP-crypto/payment.git"
        GIT_BRANCH="master"
        STAGE_TAG = "promoteToQA"
        DEV_PROJECT = "dev"
        STAGE_PROJECT = "stage"
        TEMPLATE_NAME = "python-payment"
        ARTIFACT_FOLDER = "target"
        REGISTRY = "priyavp/python-payment"
        REGCREDENTIAL = 'dockerhub'
        DOCKERIMAGE= ''
        PORT = 8080;
    }
    stages {
        stage('Get Latest Code') {
            steps {
                git branch: "${GIT_BRANCH}", url: "${GIT_REPO}"
            }
        }
        stage ("Install Dependencies") {
            steps {
                sh """
                pip install virtualenv
                virtualenv foo
                source foo/Scripts/activate
                pip install -r requirements.txt
                deactivate
                """
            }
        }
        stage('Run Tests') {
            steps {
                sh '''
                echo "Tests success"
                '''
                
            }
        }
        
        stage('Store Artifact'){
            steps{
                script{
                    def safeBuildName  = "${APPLICATION_NAME}_${BUILD_NUMBER}",
                        artifactFolder = "${ARTIFACT_FOLDER}",
                        fullFileName   = "${safeBuildName}.tar.gz",
                        applicationZip = "${artifactFolder}/${fullFileName}"
                        applicationDir = ["static",
                                          "kubernetes",
                                          "LICENSE",
                                          "Procfile",
                                          "runtime.txt",
                                            "main.py",
                                            "manifest.yml",
                                          "requirements.txt",
                                            "Dockerfile",
                                            ].join(" ");
                    def needTargetPath = !fileExists("${artifactFolder}")
                    if (needTargetPath) {
                        sh "mkdir ${artifactFolder}"
                    }
                    sh "tar -czvf ${applicationZip} ${applicationDir}"
                    archiveArtifacts artifacts: "${applicationZip}", excludes: null, onlyIfSuccessful: true
                }
            }
        }
        stage('Openshift Build') {
            steps {
                script {
                   openshiftBuild(namespace: 'cicd', buildConfig: 'fintech', showBuildLogs: 'true')
                }
            }
        }
        stage('Openshift Deployment') {
            steps {
                script {
                   openshiftDeploy(namespace: 'cicd', deploymentConfig: 'fintech')
                }
            }
        }        

 
    }  
    }
